@model WebAppHotelManagement.ViewModel.BookingViewModel
@{
    ViewBag.Title = "Index";
}
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />


<script type="text/javascript">
    $(document).ready(function () {
        DateTimePicker();
        $("#btnSave").click(function () {
            if (!$("#formCustomerBooking").valid()) {
                return;
            }
            AddCustomerBooking();
        });
        LoadBookingHistory();
    });

    function DateTimePicker() {
        $('.datepicker').datepicker({
            dateFormat: 'dd-M-yy',
            changeMonth: true,
            changeYear: true,
            showOn: 'button',
            sideBySide: true,
            controlType: 'select',
            buttonText: '<span class="glyphicon glyphicon-calendar"></span>',
            minDate: new Date()
        });

        $("#txtBookingFrom").change(function () {
            var date2 = $("#txtBookingFrom").datepicker('getDate', '+1d');
            date2.setDate(date2.getDate() + 1);
            $("#txtBookingTo").val().datepicker('option', 'minDate', date2);
            $("#txtBookingTo").datepicker('setDate', date2);
        });
    }

    function LoadBookingHistory() {
        $.ajax({
            async: true,
            type: 'GET',
            dataType: 'HTML',
            contentType: false,
            processType: false,
            url: '/Booking/GetAllBookingHistory',
            success: function (data) {
                $("#divBookingHistory").html(data);
            },
            error: function () {
                alert('There is some problem to process your request. Please try after some time.');
            }
        });
    }

    function ResetBooking() {
        $("#txtCustomerName").val('');
        $("#txtCustomerAddress").val('');
        $("#txtCustomerPhone").val('');
        $("#ddAssignRoom").val(1);
        $("#txtNumberOfMembers").val('');
        $("#txtCustomerName").focus();
        $("#btnSave").val("Save");
    }


    function AddCustomerBooking() {
        var objBookingViewModel = {};
        objBookingViewModel.CustomerName = $("#txtCustomerName").val();
        objBookingViewModel.CustomerAddress = $("#txtCustomerAddress").val();
        objBookingViewModel.CustomerPhone = $("#txtCustomerPhone").val();
        objBookingViewModel.BookingFrom = $("#txtBookingFrom").val();
        objBookingViewModel.BookingTo = $("#txtBookingTo").val();
        objBookingViewModel.AssignRoomId = $("#ddAssignRoom").val();
        objBookingViewModel.NumberOfMembers = $("#txtNumberOfMembers").val();

        $.ajax({
            async: true,
            type: 'POST',
            dataType: 'JSON',
            contentType: 'application/json; charset=utf-8',
            url: '/Booking/Index',
            data: JSON.stringify(objBookingViewModel),
            success: function (data) {
                if (data.success === true) {
                    alert(data.message);
                    ResetBooking();
                    LoadBookingHistory();
                }
            },
            error: function () {
                alert('There is some problem to process your request.');
            }
        })
    }

</script>

<div style="margin-top: 50px">
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#divNewBooking" data-backdrop="static" data-keyboard="false">New Booking</button>
</div>

<div id="divNewBooking" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">New Booking</h4>
            </div>
            <div class="modal-body">
                <form id="formCustomerBooking">
                    <div class="container">
                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(expression: model => model.CustomerName, htmlAttributes: new { @class = "control-label" })
                                @Html.TextBoxFor(expression: model => model.CustomerName, htmlAttributes: new { @class = "form-control", @id = "txtCustomerName" })
                                @Html.ValidationMessageFor(expression: model => model.CustomerName, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(expression: model => model.CustomerAddress, htmlAttributes: new { @class = "control-label" })
                                @Html.TextBoxFor(expression: model => model.CustomerAddress, htmlAttributes: new { @class = "form-control", @id = "txtCustomerAddress" })
                                @Html.ValidationMessageFor(expression: model => model.CustomerAddress, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(expression: model => model.CustomerPhone, htmlAttributes: new { @class = "control-label" })
                                @Html.TextBoxFor(expression: model => model.CustomerPhone, htmlAttributes: new { @class = "form-control", @id = "txtCustomerPhone" })
                                @Html.ValidationMessageFor(expression: model => model.CustomerPhone, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(expression: model => model.BookingFrom, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(expression: model => model.BookingFrom, additionalViewData: new { @class = "form-control datepicker", @id = "txtBookingFrom" })
                                @Html.ValidationMessageFor(expression: model => model.BookingFrom, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(expression: model => model.BookingTo, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(expression: model => model.BookingTo, additionalViewData: new { @class = "form-control datepicker", @id = "txtBookingTo"  })
                                @Html.ValidationMessageFor(expression: model => model.BookingTo, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(expression: model => model.AssignRoomId, htmlAttributes: new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.AssignRoomId, @Model.ListOfRooms, htmlAttributes: new { @class = "form-control", @id = "ddAssignRoom" })
                                @Html.ValidationMessageFor(expression: model => model.AssignRoomId, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group">
                                @Html.LabelFor(expression: model => model.NumberOfMembers, htmlAttributes: new { @class = "control-label" })
                                @Html.TextBoxFor(expression: model => model.NumberOfMembers, htmlAttributes: new { @class = "form-control", @id = "txtNumberOfMembers" })
                                @Html.ValidationMessageFor(expression: model => model.NumberOfMembers, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                            </div>
                            <div class="form-group">

                            </div>
                        </div>
                    </div>

                </form>

            </div>
        </div>
        <div class="modal-footer">
            <button id="btnSave" type="button" class="btn-success">Save</button> &nbsp;
            <button type="button" data-dismiss="modal" class="btn-danger">Close</button>
        </div>
    </div>
</div>
<div style="margin-top: 20px"></div>

<div id="divBookingHistory">

</div>

